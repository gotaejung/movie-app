[lifecycle.jsx]

import { useState, useEffect, use } from 'react';

const LifeCycle = () => {
  const [mount, setMount] = useState(0);
  const [name, setName] = useState('');
  //1. 딱 한번만 실행해
  //useEffect(() => { 실행문 }, [])
  //2. 리랜더시 매번 실행해
  //useEffect(( 실행문 )=>{})
  //3.값이 바뀔때 실행해
  //useEffect(( 실행문 )=>{}, [값])

  useEffect(() => {
    setMount(mount + 1);
    setName(name)
    console.log('딱 한번 실행 끝');
  }, [])

  useEffect(() => {
    setName(name)
    console.log('리렌더???');
  })

  useEffect(() => {
    setName(name);
    console.log('name변수 바뀔때마다');    
  }, [name])

  return (
    <>
      <h1>Mount:{mount}</h1>
      <p><input type="text" value={name} onChange={(e) => setName(e.target.value)} /></p>
      <h3>Name:{name}</h3>
    </>
  );
};
export default LifeCycle;





[App.jsx]

import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHouse } from '@fortawesome/free-solid-svg-icons';
import { useEffect, useState } from "react";

import Section from "./components/Section";

const API_KEY = '873c0bbbc5218b37d179e2dbc68ac905';
const BASE_URL = 'https://api.themoviedb.org/3/movie/';

export default function App() {
  const [nowPlaying, setNowPlaying] = useState([]);
  const [popular, setPopular] = useState([]);
  const [upComing, setUpComing] = useState([]);
  //useState 훅을 사용해 nowPlaying이라는 상태 변수(데이터 저장)와 그 값을 변경할 setNowPlaying 함수를 선언.

  //1. 딱 한번만 실행해
  //useEffect(() => { 실행문 }, [])
  //2. 리랜더시 매번 실행해
  //useEffect(( 실행문 )=>{})
  //3.값이 바뀔때 실행해
  //useEffect(( 실행문 )=>{}, [값])

  useEffect(() => {
    async function loadNowPlaying() {
      try {
        const np = await axios.get(`${BASE_URL}now_playing?api_key=${API_KEY}`)
        const po = await axios.get(`${BASE_URL}popular?api_key=${API_KEY}`)
        const up = await axios.get(`${BASE_URL}upcoming?api_key=${API_KEY}`)
        setNowPlaying(np.data.results.filter(movie => movie.poster_path))
        setPopular(po.data.results.filter(movie => movie.poster_path))
        setUpComing(up.data.results.filter(movie => movie.poster_path))
      }
      catch (err) {
        console.error('로딩실패', err)
      }
    }
    loadNowPlaying();
  }, [])

  /**
   * Loader 
   * 
   * 
         */

  const isLoading = nowPlaying.length === 0 && popular.length ===0 && upComing.length === 0;


  if (isLoading) {
    return (
      <main className="pt-16 min-h-screen bg-black text-white grid place-items-center"> {/* 테일윈드css */}
        <p>로딩중...</p>
      </main>
    )
  }

  return (
    <>
    <Header />
    <VideoHero />
    <main className="bg-black text-white">
      <Section title="현재 상영작" items={nowPlaying} />
    </main>
    </>
  )
}

function Header() {
  return (
    <header className="fixed top-0 left-0 w-full py-4 px-2 bg-black/90 z-50">
      <div className="container mx-auto">
        <h1 className="text-3xl text-yellow-300 font-bold">
          <FontAwesomeIcon icon={faHouse} />GOFLIX</h1>
      </div>
    </header>
  )
}

function VideoHero(){
  return(
    <section className="relative h-screen overflow-hidden">
      <video autoPlay muted loop playsInline className='absolute top-0 left-0 w-full h-full object-cover'>
        <source src='./public/video.mp4' />
      </video>
      <div className="absolute inset-0 bg-black/50"></div>
      <div className="relative z-10 flex-col flex items-center justify-center h-full">
        <h2 className="text-5xl md:text-7xl font-bold mb-6 text-yellow-300">
          GOFLIX
        </h2>
        <p className="text-xl md:text-2xl mb-8 max-w-2xl">
          최신 영화와 인기 작품을 만나보세요.
        </p>
        <button className="bg-yellow-500 hover:bg-yellow-600 text-black px-8 py-4 rounded-lg text-lg font-bold transition-colors duration-300">지금 시작하기</button>
      </div>
    </section>
  )
}